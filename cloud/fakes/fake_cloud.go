// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/tscolari/bosh-c3pi/cloud"
)

type FakeCloud struct {
	CreateStemcellStub        func(imagePath string, cloudProperties cloud.CloudProperties) (string, error)
	createStemcellMutex       sync.RWMutex
	createStemcellArgsForCall []struct {
		imagePath       string
		cloudProperties cloud.CloudProperties
	}
	createStemcellReturns struct {
		result1 string
		result2 error
	}
	DeleteStemcellStub        func(stemcellID string) error
	deleteStemcellMutex       sync.RWMutex
	deleteStemcellArgsForCall []struct {
		stemcellID string
	}
	deleteStemcellReturns struct {
		result1 error
	}
	CurrentVmIDStub        func() string
	currentVmIDMutex       sync.RWMutex
	currentVmIDArgsForCall []struct{}
	currentVmIDReturns     struct {
		result1 string
	}
	CreateVmStub        func(agentID, stemcellID string, cloudProperties cloud.CloudProperties, networks cloud.Networks, diskLocality string, env cloud.Environment) (string, error)
	createVmMutex       sync.RWMutex
	createVmArgsForCall []struct {
		agentID         string
		stemcellID      string
		cloudProperties cloud.CloudProperties
		networks        cloud.Networks
		diskLocality    string
		env             cloud.Environment
	}
	createVmReturns struct {
		result1 string
		result2 error
	}
	DeleteVmStub        func(vmID string) error
	deleteVmMutex       sync.RWMutex
	deleteVmArgsForCall []struct {
		vmID string
	}
	deleteVmReturns struct {
		result1 error
	}
	HasVmStub        func(vmID string) (bool, error)
	hasVmMutex       sync.RWMutex
	hasVmArgsForCall []struct {
		vmID string
	}
	hasVmReturns struct {
		result1 bool
		result2 error
	}
	RebootVmStub        func(vmID string) error
	rebootVmMutex       sync.RWMutex
	rebootVmArgsForCall []struct {
		vmID string
	}
	rebootVmReturns struct {
		result1 error
	}
	SetVmMetadataStub        func(vm string, metadata cloud.Metadata) error
	setVmMetadataMutex       sync.RWMutex
	setVmMetadataArgsForCall []struct {
		vm       string
		metadata cloud.Metadata
	}
	setVmMetadataReturns struct {
		result1 error
	}
	CreateDiskStub        func(size int, cloudProperties cloud.CloudProperties, vmLocality string) (string, error)
	createDiskMutex       sync.RWMutex
	createDiskArgsForCall []struct {
		size            int
		cloudProperties cloud.CloudProperties
		vmLocality      string
	}
	createDiskReturns struct {
		result1 string
		result2 error
	}
	GetDisksStub        func(vmID string) ([]string, error)
	getDisksMutex       sync.RWMutex
	getDisksArgsForCall []struct {
		vmID string
	}
	getDisksReturns struct {
		result1 []string
		result2 error
	}
	HasDiskStub        func(diskID string) (bool, error)
	hasDiskMutex       sync.RWMutex
	hasDiskArgsForCall []struct {
		diskID string
	}
	hasDiskReturns struct {
		result1 bool
		result2 error
	}
	DeleteDiskStub        func(diskID string) error
	deleteDiskMutex       sync.RWMutex
	deleteDiskArgsForCall []struct {
		diskID string
	}
	deleteDiskReturns struct {
		result1 error
	}
	AttachDiskStub        func(vmID, diskID string) error
	attachDiskMutex       sync.RWMutex
	attachDiskArgsForCall []struct {
		vmID   string
		diskID string
	}
	attachDiskReturns struct {
		result1 error
	}
	DetachDiskStub        func(vmID, diskID string) error
	detachDiskMutex       sync.RWMutex
	detachDiskArgsForCall []struct {
		vmID   string
		diskID string
	}
	detachDiskReturns struct {
		result1 error
	}
	SnapshotDiskStub        func(diskID string, metadata cloud.Metadata) (string, error)
	snapshotDiskMutex       sync.RWMutex
	snapshotDiskArgsForCall []struct {
		diskID   string
		metadata cloud.Metadata
	}
	snapshotDiskReturns struct {
		result1 string
		result2 error
	}
	DeleteSnapshotStub        func(snapshotID string) error
	deleteSnapshotMutex       sync.RWMutex
	deleteSnapshotArgsForCall []struct {
		snapshotID string
	}
	deleteSnapshotReturns struct {
		result1 error
	}
}

func (fake *FakeCloud) CreateStemcell(imagePath string, cloudProperties cloud.CloudProperties) (string, error) {
	fake.createStemcellMutex.Lock()
	fake.createStemcellArgsForCall = append(fake.createStemcellArgsForCall, struct {
		imagePath       string
		cloudProperties cloud.CloudProperties
	}{imagePath, cloudProperties})
	fake.createStemcellMutex.Unlock()
	if fake.CreateStemcellStub != nil {
		return fake.CreateStemcellStub(imagePath, cloudProperties)
	} else {
		return fake.createStemcellReturns.result1, fake.createStemcellReturns.result2
	}
}

func (fake *FakeCloud) CreateStemcellCallCount() int {
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	return len(fake.createStemcellArgsForCall)
}

func (fake *FakeCloud) CreateStemcellArgsForCall(i int) (string, cloud.CloudProperties) {
	fake.createStemcellMutex.RLock()
	defer fake.createStemcellMutex.RUnlock()
	return fake.createStemcellArgsForCall[i].imagePath, fake.createStemcellArgsForCall[i].cloudProperties
}

func (fake *FakeCloud) CreateStemcellReturns(result1 string, result2 error) {
	fake.CreateStemcellStub = nil
	fake.createStemcellReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) DeleteStemcell(stemcellID string) error {
	fake.deleteStemcellMutex.Lock()
	fake.deleteStemcellArgsForCall = append(fake.deleteStemcellArgsForCall, struct {
		stemcellID string
	}{stemcellID})
	fake.deleteStemcellMutex.Unlock()
	if fake.DeleteStemcellStub != nil {
		return fake.DeleteStemcellStub(stemcellID)
	} else {
		return fake.deleteStemcellReturns.result1
	}
}

func (fake *FakeCloud) DeleteStemcellCallCount() int {
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	return len(fake.deleteStemcellArgsForCall)
}

func (fake *FakeCloud) DeleteStemcellArgsForCall(i int) string {
	fake.deleteStemcellMutex.RLock()
	defer fake.deleteStemcellMutex.RUnlock()
	return fake.deleteStemcellArgsForCall[i].stemcellID
}

func (fake *FakeCloud) DeleteStemcellReturns(result1 error) {
	fake.DeleteStemcellStub = nil
	fake.deleteStemcellReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) CurrentVmID() string {
	fake.currentVmIDMutex.Lock()
	fake.currentVmIDArgsForCall = append(fake.currentVmIDArgsForCall, struct{}{})
	fake.currentVmIDMutex.Unlock()
	if fake.CurrentVmIDStub != nil {
		return fake.CurrentVmIDStub()
	} else {
		return fake.currentVmIDReturns.result1
	}
}

func (fake *FakeCloud) CurrentVmIDCallCount() int {
	fake.currentVmIDMutex.RLock()
	defer fake.currentVmIDMutex.RUnlock()
	return len(fake.currentVmIDArgsForCall)
}

func (fake *FakeCloud) CurrentVmIDReturns(result1 string) {
	fake.CurrentVmIDStub = nil
	fake.currentVmIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCloud) CreateVm(agentID string, stemcellID string, cloudProperties cloud.CloudProperties, networks cloud.Networks, diskLocality string, env cloud.Environment) (string, error) {
	fake.createVmMutex.Lock()
	fake.createVmArgsForCall = append(fake.createVmArgsForCall, struct {
		agentID         string
		stemcellID      string
		cloudProperties cloud.CloudProperties
		networks        cloud.Networks
		diskLocality    string
		env             cloud.Environment
	}{agentID, stemcellID, cloudProperties, networks, diskLocality, env})
	fake.createVmMutex.Unlock()
	if fake.CreateVmStub != nil {
		return fake.CreateVmStub(agentID, stemcellID, cloudProperties, networks, diskLocality, env)
	} else {
		return fake.createVmReturns.result1, fake.createVmReturns.result2
	}
}

func (fake *FakeCloud) CreateVmCallCount() int {
	fake.createVmMutex.RLock()
	defer fake.createVmMutex.RUnlock()
	return len(fake.createVmArgsForCall)
}

func (fake *FakeCloud) CreateVmArgsForCall(i int) (string, string, cloud.CloudProperties, cloud.Networks, string, cloud.Environment) {
	fake.createVmMutex.RLock()
	defer fake.createVmMutex.RUnlock()
	return fake.createVmArgsForCall[i].agentID, fake.createVmArgsForCall[i].stemcellID, fake.createVmArgsForCall[i].cloudProperties, fake.createVmArgsForCall[i].networks, fake.createVmArgsForCall[i].diskLocality, fake.createVmArgsForCall[i].env
}

func (fake *FakeCloud) CreateVmReturns(result1 string, result2 error) {
	fake.CreateVmStub = nil
	fake.createVmReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) DeleteVm(vmID string) error {
	fake.deleteVmMutex.Lock()
	fake.deleteVmArgsForCall = append(fake.deleteVmArgsForCall, struct {
		vmID string
	}{vmID})
	fake.deleteVmMutex.Unlock()
	if fake.DeleteVmStub != nil {
		return fake.DeleteVmStub(vmID)
	} else {
		return fake.deleteVmReturns.result1
	}
}

func (fake *FakeCloud) DeleteVmCallCount() int {
	fake.deleteVmMutex.RLock()
	defer fake.deleteVmMutex.RUnlock()
	return len(fake.deleteVmArgsForCall)
}

func (fake *FakeCloud) DeleteVmArgsForCall(i int) string {
	fake.deleteVmMutex.RLock()
	defer fake.deleteVmMutex.RUnlock()
	return fake.deleteVmArgsForCall[i].vmID
}

func (fake *FakeCloud) DeleteVmReturns(result1 error) {
	fake.DeleteVmStub = nil
	fake.deleteVmReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) HasVm(vmID string) (bool, error) {
	fake.hasVmMutex.Lock()
	fake.hasVmArgsForCall = append(fake.hasVmArgsForCall, struct {
		vmID string
	}{vmID})
	fake.hasVmMutex.Unlock()
	if fake.HasVmStub != nil {
		return fake.HasVmStub(vmID)
	} else {
		return fake.hasVmReturns.result1, fake.hasVmReturns.result2
	}
}

func (fake *FakeCloud) HasVmCallCount() int {
	fake.hasVmMutex.RLock()
	defer fake.hasVmMutex.RUnlock()
	return len(fake.hasVmArgsForCall)
}

func (fake *FakeCloud) HasVmArgsForCall(i int) string {
	fake.hasVmMutex.RLock()
	defer fake.hasVmMutex.RUnlock()
	return fake.hasVmArgsForCall[i].vmID
}

func (fake *FakeCloud) HasVmReturns(result1 bool, result2 error) {
	fake.HasVmStub = nil
	fake.hasVmReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) RebootVm(vmID string) error {
	fake.rebootVmMutex.Lock()
	fake.rebootVmArgsForCall = append(fake.rebootVmArgsForCall, struct {
		vmID string
	}{vmID})
	fake.rebootVmMutex.Unlock()
	if fake.RebootVmStub != nil {
		return fake.RebootVmStub(vmID)
	} else {
		return fake.rebootVmReturns.result1
	}
}

func (fake *FakeCloud) RebootVmCallCount() int {
	fake.rebootVmMutex.RLock()
	defer fake.rebootVmMutex.RUnlock()
	return len(fake.rebootVmArgsForCall)
}

func (fake *FakeCloud) RebootVmArgsForCall(i int) string {
	fake.rebootVmMutex.RLock()
	defer fake.rebootVmMutex.RUnlock()
	return fake.rebootVmArgsForCall[i].vmID
}

func (fake *FakeCloud) RebootVmReturns(result1 error) {
	fake.RebootVmStub = nil
	fake.rebootVmReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) SetVmMetadata(vm string, metadata cloud.Metadata) error {
	fake.setVmMetadataMutex.Lock()
	fake.setVmMetadataArgsForCall = append(fake.setVmMetadataArgsForCall, struct {
		vm       string
		metadata cloud.Metadata
	}{vm, metadata})
	fake.setVmMetadataMutex.Unlock()
	if fake.SetVmMetadataStub != nil {
		return fake.SetVmMetadataStub(vm, metadata)
	} else {
		return fake.setVmMetadataReturns.result1
	}
}

func (fake *FakeCloud) SetVmMetadataCallCount() int {
	fake.setVmMetadataMutex.RLock()
	defer fake.setVmMetadataMutex.RUnlock()
	return len(fake.setVmMetadataArgsForCall)
}

func (fake *FakeCloud) SetVmMetadataArgsForCall(i int) (string, cloud.Metadata) {
	fake.setVmMetadataMutex.RLock()
	defer fake.setVmMetadataMutex.RUnlock()
	return fake.setVmMetadataArgsForCall[i].vm, fake.setVmMetadataArgsForCall[i].metadata
}

func (fake *FakeCloud) SetVmMetadataReturns(result1 error) {
	fake.SetVmMetadataStub = nil
	fake.setVmMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) CreateDisk(size int, cloudProperties cloud.CloudProperties, vmLocality string) (string, error) {
	fake.createDiskMutex.Lock()
	fake.createDiskArgsForCall = append(fake.createDiskArgsForCall, struct {
		size            int
		cloudProperties cloud.CloudProperties
		vmLocality      string
	}{size, cloudProperties, vmLocality})
	fake.createDiskMutex.Unlock()
	if fake.CreateDiskStub != nil {
		return fake.CreateDiskStub(size, cloudProperties, vmLocality)
	} else {
		return fake.createDiskReturns.result1, fake.createDiskReturns.result2
	}
}

func (fake *FakeCloud) CreateDiskCallCount() int {
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	return len(fake.createDiskArgsForCall)
}

func (fake *FakeCloud) CreateDiskArgsForCall(i int) (int, cloud.CloudProperties, string) {
	fake.createDiskMutex.RLock()
	defer fake.createDiskMutex.RUnlock()
	return fake.createDiskArgsForCall[i].size, fake.createDiskArgsForCall[i].cloudProperties, fake.createDiskArgsForCall[i].vmLocality
}

func (fake *FakeCloud) CreateDiskReturns(result1 string, result2 error) {
	fake.CreateDiskStub = nil
	fake.createDiskReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) GetDisks(vmID string) ([]string, error) {
	fake.getDisksMutex.Lock()
	fake.getDisksArgsForCall = append(fake.getDisksArgsForCall, struct {
		vmID string
	}{vmID})
	fake.getDisksMutex.Unlock()
	if fake.GetDisksStub != nil {
		return fake.GetDisksStub(vmID)
	} else {
		return fake.getDisksReturns.result1, fake.getDisksReturns.result2
	}
}

func (fake *FakeCloud) GetDisksCallCount() int {
	fake.getDisksMutex.RLock()
	defer fake.getDisksMutex.RUnlock()
	return len(fake.getDisksArgsForCall)
}

func (fake *FakeCloud) GetDisksArgsForCall(i int) string {
	fake.getDisksMutex.RLock()
	defer fake.getDisksMutex.RUnlock()
	return fake.getDisksArgsForCall[i].vmID
}

func (fake *FakeCloud) GetDisksReturns(result1 []string, result2 error) {
	fake.GetDisksStub = nil
	fake.getDisksReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) HasDisk(diskID string) (bool, error) {
	fake.hasDiskMutex.Lock()
	fake.hasDiskArgsForCall = append(fake.hasDiskArgsForCall, struct {
		diskID string
	}{diskID})
	fake.hasDiskMutex.Unlock()
	if fake.HasDiskStub != nil {
		return fake.HasDiskStub(diskID)
	} else {
		return fake.hasDiskReturns.result1, fake.hasDiskReturns.result2
	}
}

func (fake *FakeCloud) HasDiskCallCount() int {
	fake.hasDiskMutex.RLock()
	defer fake.hasDiskMutex.RUnlock()
	return len(fake.hasDiskArgsForCall)
}

func (fake *FakeCloud) HasDiskArgsForCall(i int) string {
	fake.hasDiskMutex.RLock()
	defer fake.hasDiskMutex.RUnlock()
	return fake.hasDiskArgsForCall[i].diskID
}

func (fake *FakeCloud) HasDiskReturns(result1 bool, result2 error) {
	fake.HasDiskStub = nil
	fake.hasDiskReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) DeleteDisk(diskID string) error {
	fake.deleteDiskMutex.Lock()
	fake.deleteDiskArgsForCall = append(fake.deleteDiskArgsForCall, struct {
		diskID string
	}{diskID})
	fake.deleteDiskMutex.Unlock()
	if fake.DeleteDiskStub != nil {
		return fake.DeleteDiskStub(diskID)
	} else {
		return fake.deleteDiskReturns.result1
	}
}

func (fake *FakeCloud) DeleteDiskCallCount() int {
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	return len(fake.deleteDiskArgsForCall)
}

func (fake *FakeCloud) DeleteDiskArgsForCall(i int) string {
	fake.deleteDiskMutex.RLock()
	defer fake.deleteDiskMutex.RUnlock()
	return fake.deleteDiskArgsForCall[i].diskID
}

func (fake *FakeCloud) DeleteDiskReturns(result1 error) {
	fake.DeleteDiskStub = nil
	fake.deleteDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) AttachDisk(vmID string, diskID string) error {
	fake.attachDiskMutex.Lock()
	fake.attachDiskArgsForCall = append(fake.attachDiskArgsForCall, struct {
		vmID   string
		diskID string
	}{vmID, diskID})
	fake.attachDiskMutex.Unlock()
	if fake.AttachDiskStub != nil {
		return fake.AttachDiskStub(vmID, diskID)
	} else {
		return fake.attachDiskReturns.result1
	}
}

func (fake *FakeCloud) AttachDiskCallCount() int {
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	return len(fake.attachDiskArgsForCall)
}

func (fake *FakeCloud) AttachDiskArgsForCall(i int) (string, string) {
	fake.attachDiskMutex.RLock()
	defer fake.attachDiskMutex.RUnlock()
	return fake.attachDiskArgsForCall[i].vmID, fake.attachDiskArgsForCall[i].diskID
}

func (fake *FakeCloud) AttachDiskReturns(result1 error) {
	fake.AttachDiskStub = nil
	fake.attachDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) DetachDisk(vmID string, diskID string) error {
	fake.detachDiskMutex.Lock()
	fake.detachDiskArgsForCall = append(fake.detachDiskArgsForCall, struct {
		vmID   string
		diskID string
	}{vmID, diskID})
	fake.detachDiskMutex.Unlock()
	if fake.DetachDiskStub != nil {
		return fake.DetachDiskStub(vmID, diskID)
	} else {
		return fake.detachDiskReturns.result1
	}
}

func (fake *FakeCloud) DetachDiskCallCount() int {
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	return len(fake.detachDiskArgsForCall)
}

func (fake *FakeCloud) DetachDiskArgsForCall(i int) (string, string) {
	fake.detachDiskMutex.RLock()
	defer fake.detachDiskMutex.RUnlock()
	return fake.detachDiskArgsForCall[i].vmID, fake.detachDiskArgsForCall[i].diskID
}

func (fake *FakeCloud) DetachDiskReturns(result1 error) {
	fake.DetachDiskStub = nil
	fake.detachDiskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloud) SnapshotDisk(diskID string, metadata cloud.Metadata) (string, error) {
	fake.snapshotDiskMutex.Lock()
	fake.snapshotDiskArgsForCall = append(fake.snapshotDiskArgsForCall, struct {
		diskID   string
		metadata cloud.Metadata
	}{diskID, metadata})
	fake.snapshotDiskMutex.Unlock()
	if fake.SnapshotDiskStub != nil {
		return fake.SnapshotDiskStub(diskID, metadata)
	} else {
		return fake.snapshotDiskReturns.result1, fake.snapshotDiskReturns.result2
	}
}

func (fake *FakeCloud) SnapshotDiskCallCount() int {
	fake.snapshotDiskMutex.RLock()
	defer fake.snapshotDiskMutex.RUnlock()
	return len(fake.snapshotDiskArgsForCall)
}

func (fake *FakeCloud) SnapshotDiskArgsForCall(i int) (string, cloud.Metadata) {
	fake.snapshotDiskMutex.RLock()
	defer fake.snapshotDiskMutex.RUnlock()
	return fake.snapshotDiskArgsForCall[i].diskID, fake.snapshotDiskArgsForCall[i].metadata
}

func (fake *FakeCloud) SnapshotDiskReturns(result1 string, result2 error) {
	fake.SnapshotDiskStub = nil
	fake.snapshotDiskReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCloud) DeleteSnapshot(snapshotID string) error {
	fake.deleteSnapshotMutex.Lock()
	fake.deleteSnapshotArgsForCall = append(fake.deleteSnapshotArgsForCall, struct {
		snapshotID string
	}{snapshotID})
	fake.deleteSnapshotMutex.Unlock()
	if fake.DeleteSnapshotStub != nil {
		return fake.DeleteSnapshotStub(snapshotID)
	} else {
		return fake.deleteSnapshotReturns.result1
	}
}

func (fake *FakeCloud) DeleteSnapshotCallCount() int {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return len(fake.deleteSnapshotArgsForCall)
}

func (fake *FakeCloud) DeleteSnapshotArgsForCall(i int) string {
	fake.deleteSnapshotMutex.RLock()
	defer fake.deleteSnapshotMutex.RUnlock()
	return fake.deleteSnapshotArgsForCall[i].snapshotID
}

func (fake *FakeCloud) DeleteSnapshotReturns(result1 error) {
	fake.DeleteSnapshotStub = nil
	fake.deleteSnapshotReturns = struct {
		result1 error
	}{result1}
}

var _ cloud.Cloud = new(FakeCloud)
